openapi: 3.1.0
info:
  title: Soul Memory API (JSONB/BIGINT)
  version: 2.1.1
servers:
  - url: https://xhfmqslbujyrxkpdddis.supabase.co/functions/v1

paths:
  /memory:
    post:
      operationId: store_memory
      summary: Store a new memory entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemoryEntryInput"
      responses:
        "200":
          description: Memory stored
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoryEntry"
    get:
      operationId: retrieve_memory
      summary: Retrieve memory entries
      parameters:
        - { name: memory_content, in: query, schema: { type: string } }
        - { name: tags, in: query, schema: { type: string, description: "cs.{A,B} or ov.{A,B}" } }
        - { name: protocol, in: query, schema: { type: string } }
        - { name: limit, in: query, schema: { type: integer, default: 50 } }
        - { name: offset, in: query, schema: { type: integer, default: 0 } }
      responses:
        "200":
          description: Memory list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemoryEntry"

  /memory_direct:
    post:
      operationId: store_memory_direct
      summary: Trusted insert (token in body)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [memory_content, tags, protocol, trusted, trusted_token]
              properties:
                memory_content: { type: string }
                tags: { type: array, items: { type: string } }
                protocol: { type: string }
                trusted: { type: boolean, enum: [true] }
                trusted_token: { type: string }
      responses:
        "200": { description: OK }
        "403": { description: Forbidden }

  /memory_count_by_tag:
    get:
      operationId: count_memories_by_tag
      summary: Count entries by a tag
      parameters:
        - { name: tag, in: query, required: true, schema: { type: string } }
      responses:
        "200":
          description: Count
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag: { type: string }
                  count: { type: integer }

  /memory_recent_per_tag:
    get:
      operationId: get_recent_memories_per_tag
      summary: Most recent memory per tag
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag: { type: string }
                    id: { type: integer }
                    memory_content: { type: string }
                    tags: { type: array, items: { type: string } }
                    protocol: { type: string }

  /memory_search:
    get:
      operationId: search_memory_content
      summary: Fullâ€‘text search
      parameters:
        - { name: q, in: query, required: true, schema: { type: string } }
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemoryEntry"

  /memory_by_tags:
    get:
      operationId: filter_by_tags
      summary: Get memories with ANY of the tags
      parameters:
        - { name: tags, in: query, required: true, schema: { type: string, description: "comma-separated" } }
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MemoryEntry"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    MemoryEntryInput:
      type: object
      required: [memory_content, tags]
      properties:
        memory_content: { type: string }
        tags: { type: array, items: { type: string } }
        protocol: { type: string }
    MemoryEntry:
      type: object
      properties:
        id: { type: integer }
        memory_content: { type: string }
        tags: { type: array, items: { type: string } }
        protocol: { type: string }

security:
  - bearerAuth: []
